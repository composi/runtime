{"version":3,"file":"runtime.js.map","sources":["../src/union.js","../src/effects.js","../src/runtime.js"],"sourcesContent":["/**\n * Helper function for testing whether message type exists on actions object.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n\n/**\n * @param {import('./types').Tag} tag\n * @param {Object<string, Function>} handlers\n * @param {() => void} [catchAll]\n */\nfunction match(tag, handlers, catchAll) {\n  const {type, data} = tag\n  return type\n    ? (type => {\n      const match = hasOwnProperty.call(handlers, type) && handlers[type]\n      return match\n        ? match(data)\n        : catchAll\n        ? catchAll()\n        : console.error(\n          `The message you sent has no matching action method. Check the spelling for the message or the action method. The message type was \"${type}\".`\n        )\n    })(type)\n    : (() => {\n      console.error(\n        \"The message you provided was not valid. Messages have the format: {type: 'whatever', data?: 'something'}\"\n      )\n      console.error('The tag you provided was:')\n      console.dir(tag)\n    })()\n}\n\n/**\n * Create a union of string tags.\n * @param {string[]} types\n * @returns {Object<string, any>} Object\n */\nfunction createUnion(types) {\n  const variants = Object.create(null)\n\n  let idx = 0\n  while (idx < types.length) {\n    const type = types[idx]\n    type === 'match'\n      && console.error(\n        `The message type you provided was \"match\". This cannot be used since it would override the message union's own match method. Please change it to something else, such as \"matchName\", etc.`\n      )\n\n    variants[type] = data => ({ type, data })\n    idx++\n  }\n\n  return { variants, match }\n}\n\n/**\n * @typedef {Object} MessageUnion\n */\n\n/**\n * Create a union of types for matching up with functions. This is used to define actions for the `update` method of a runtime program.\n * @param {...string} types\n * @returns {MessageUnion} MessageUnion\n */\nexport function union(...types) {\n  const { variants, match } = createUnion(types)\n  variants.match = match\n  return variants\n}\n","/**\n * @typedef {import('./types').Send} Send\n * @typedef {import('./types').Message} Message\n * @typedef {import('./types').State} State\n * @typedef {() => State} GetState\n * @typedef {(send?: Send, getState?: GetState) => any} Effect\n */\n/**\n * Function to batch effects together.\n * @param {...Effect} effects\n * @return {(send?: Send, getState?: GetState) => void} Function\n */\nexport const batchEffects = (...effects) => (getState, send) =>\n  effects.map(effect => effect && effect(getState, send))\n\nexport const batch = batchEffects\n","\n/**\n * The @composi/runtime.\n * @example\n *\n * ```\n * // Create a runtime program\n * const program = {\n *   // Define state:\n *   init() {\n *     return [{count: 0}]\n *   },\n *   // Define view to render.\n *   // Notice event to send message 'incr'.\n *   view(state, send) {\n *      return render(<div onclick={send('incr')}>The count is: {state.count}</div>, document.body)\n *   },\n *   // Define action to update state:\n *   update(state, msg) {\n *     if (msg === 'incr') {\n *        return [state.count++]\n *     }\n *   }\n * }\n * // Run the program:\n * run(program)\n * ```\n * @param {import('./types').Program} program A program to run with five methods: `init`, `view`, `update`, `subscriptions` and `done`.\n * @return {() => void} Function to terminate runtime.\n */\nexport function run(program) {\n  let init = program.init\n  const view = program.view\n  const update = program.update\n  const subscriptions = program.subscriptions || program.subs\n  const done = program.done\n  let state\n  let isRunning = true\n  let isFirstRun = true\n  const getState = () => state\n\n  /**\n   * Send a message.\n   * @param {import('./types').Message} message\n   *\n   */\n  function send(message, data) {\n    let msg = message\n    /**\n     * message is a function from a tagged union that\n     * can be called to return a message object.\n     */\n    isRunning\n     && (typeof message === 'function') \n     && (msg = /** @type {Function} */ (message)(data))\n    \n    return isRunning &&\n      updateView(update(state, msg, send))\n  }\n\n  /**\n   * Expose send as static function on program object.\n   * This is to let you send messages to the program\n   * from other contexts, such as in a @composi/router action.\n   */\n  program['send'] = send\n\n  /**\n   * Handle changes to state and executing effects.\n   * @param {any} update\n   * @return {void} undefined\n   */\n  const updateView = update => {\n    update \n      ? state = update \n      : init \n      ? state = init() \n      : state = undefined\n\n    isFirstRun\n      && subscriptions\n      && typeof subscriptions === 'function'\n      && subscriptions(send, getState)\n\n    isFirstRun = false\n    \n    view(state, send)\n  }\n  updateView(state)\n\n  /**\n   * Function to end runtime.\n   * @return {void} undefined\n   */\n  return () => {\n    isRunning\n      && done\n      && done(state)\n      \n    isRunning = false\n  }\n}\n"],"names":["match","tag","handlers","catchAll","type","data","hasOwnProperty","call","console","error","dir","createUnion","types","variants","Object","create","idx","length","prototype","batchEffects","effects","getState","send","map","effect","program","message","msg","isRunning","updateView","update","state","init","view","subscriptions","subs","done","isFirstRun"],"mappings":"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"}